# bash completion for Debian ola tools
# Copyright Peter Newman 2013, based on apache2 and apt-file completion

#General functions
_ola_list_pids()
{
  COMPREPLY=( $( compgen -W '$( command $1 --list_pids 2>/dev/null ) $2' -- $cur  ) )
}

#Commands
#ola_artnet
have ola_artnet && _ola_artnet()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--dev --net --long_name --name --subnet --universe' -- $cur ) )
}
complete -F _ola_artnet ola_artnet

#olad
have olad && _olad()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--config-dir --http-data-dir --daemon --interface --log-level --http-port --rpc-port --syslog --version --no-http --no-http-quit'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _olad olad

#ola_dev_info
have ola_dev_info && _ola_dev_info()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--plugin_id' -- $cur ) )
}
complete -F _ola_dev_info ola_dev_info

#ola_dmxconsole
have ola_dmxconsole && _ola_dmxconsole()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--universe' -- $cur ) )
}
complete -F _ola_dmxconsole ola_dmxconsole

#ola_dmxmonitor
have ola_dmxmonitor && _ola_dmxmonitor()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--universe' -- $cur ) )
}
complete -F _ola_dmxmonitor ola_dmxmonitor

#ola_e131
have ola_e131 && _ola_e131()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--dev --input --port_id --preview_mode'

  case "$prev" in
    --preview_mode)
      opts='on off'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _ola_e131 ola_e131

#ola_patch
have ola_patch && _ola_patch()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--patch --device --port --unpatch --input --universe' -- $cur ) )
}
complete -F _ola_patch ola_patch

#ola_plugin_info
have ola_plugin_info && _ola_plugin_info()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--plugin_id' -- $cur ) )
}
complete -F _ola_plugin_info ola_plugin_info

#ola_plugin_state
have ola_plugin_state && _ola_plugin_state()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--plugin_id' -- $cur ) )
}
complete -F _ola_plugin_state ola_plugin_state

#ola_rdm_discover
have ola_rdm_discover && _ola_rdm_discover()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--full --incremental --universe' -- $cur ) )
}
complete -F _ola_rdm_discover ola_rdm_discover

#ola_rdm_get
have ola_rdm_get && _ola_rdm_get()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

  _ola_list_pids ola_rdm_get '--sub_device --list_pids --universe --uid'
}
complete -F _ola_rdm_get ola_rdm_get

#ola_rdm_set
have ola_rdm_set && _ola_rdm_set()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

  _ola_list_pids ola_rdm_set '--sub_device --list_pids --universe --uid'
}
complete -F _ola_rdm_set ola_rdm_set

#ola_recorder
#Todo: only show additional playback options --delay --iterations when in playback
have ola_recorder && _ola_recorder()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level --record --playback --universes --verify --delay --iterations'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _ola_recorder ola_recorder

#ola_set_dmx
have ola_set_dmx && _ola_set_dmx()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--universe --dmx' -- $cur ) )
}
complete -F _ola_set_dmx ola_set_dmx

#ola_set_priority
have ola_set_priority && _ola_set_priority()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--device --input --override --port' -- $cur ) )
}
complete -F _ola_set_priority ola_set_priority

#ola_streaming_client
have ola_streaming_client && _ola_streaming_client()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--universe --dmx' -- $cur ) )
}
complete -F _ola_streaming_client ola_streaming_client

#ola_timecode
have ola_timecode && _ola_timecode()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--format'

  case "$prev" in
    -f | --format)
      opts='FILM EBU DF SMPTE'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _ola_timecode ola_timecode

#ola_trigger
have ola_trigger && _ola_trigger()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level --offset --universe'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _ola_trigger ola_trigger

#ola_uni_info
#No options apart from help

#ola_uni_merge
have ola_uni_merge && _ola_uni_merge()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--ltp --universe' -- $cur ) )
}
complete -F _ola_uni_merge ola_uni_merge

#ola_uni_name
have ola_uni_name && _ola_uni_name()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--name --universe' -- $cur ) )
}
complete -F _ola_uni_name ola_uni_name

#ola_uni_stats
have ola_uni_stats && _ola_uni_stats()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _ola_uni_stats ola_uni_stats

#ola_usbpro
have ola_usbpro && _ola_usbpro()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--assignments --brk --dev --mab --port --rate --serial' -- $cur ) )
}
complete -F _ola_usbpro ola_usbpro

#rdmpro_sniffer
have rdmpro_sniffer && _rdmpro_sniffer()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--display-asc --display-dmx --dmx-slot-limit --log-level --parse-raw-dump --full-rdm --timestamp --write-raw-dump'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _rdmpro_sniffer rdmpro_sniffer

#e131_transmit_test
#have e131_transmit_test && 
_e131_transmit_test()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--interactive' -- $cur ) )
}
complete -F _e131_transmit_test e131_transmit_test

#e131_loadtest
#have e131_loadtest && 
_e131_loadtest()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--fps --universes' -- $cur ) )
}
complete -F _e131_loadtest e131_loadtest

#slp_client
#have slp_client && 
_slp_client()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level --scopes --lifetime'

  #TODO: Check if scopes are listed anywhere
  #TODO: Get/output a list of command-and-arguments and complete them
  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _slp_client slp_client

#slp_server
#have slp_server && 
_slp_server()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--ip --log-level --slp-port --no-http --no-da --setuid --setgid --scopes --services'

  #TODO: Check if setuid and setgid are Linux ones, and if so complete them
  #TODO: Check if scopes are listed anywhere
  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _slp_server slp_server

#e133_controller
#have e133_controller && 
_e133_controller()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--endpoint --target --ip --log-level --pid-location --set --uid'

  #TODO: Auto complete PIDs, probably add an option to list them too
  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _e133_controller e133_controller

#e133_monitor
#have e133_monitor && 
_e133_monitor()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--targets --log-level --pid-location'

  #TODO: Auto complete PIDs, probably add an option to list them too
  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _e133_monitor e133_monitor

#e133_receiver
#have e133_receiver && 
_e133_receiver()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--ip --log-level --timeout --universe --uid'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _e133_receiver e133_receiver

#slp_locate
#have slp_locate && 
_slp_locate()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level --refresh'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _slp_locate slp_locate

#slp_register
#have slp_register && 
_slp_register()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level --timeout --openslp'
  #TODO: Ensure binary reports if --openslp option is used without it being installed

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _slp_register slp_register

#slp_sa_test
#TODO: Work out why this one isn't working for some reason!
#Only seems to fail when run as ./slp_sa_test, works fine as ../slp_sa_test!
#have slp_sa_test && 
_slp_sa_test()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--log-level --timeout --list-tests --tests'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
    -t | --tests)
      #TODO: Check if this needs to work with a comma seperated list of tests
      #TODO: Get this to work with the $0 command
      #opts="$( command slp_sa_test --list-tests 2>/dev/null )"
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _slp_sa_test slp_sa_test

#usbpro_firmware
#have usbpro_firmware && 
_usbpro_firmware()
{
  local cur prev opts

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  prev=${COMP_WORDS[COMP_CWORD-1]}
  opts='--device --firmware --log-level'

  case "$prev" in
    -l | --log-level)
      opts='0 1 2 3 4'
      ;;
    -d | --device)
      COMPREPLY=($( compgen -G "/dev/ttyUSB*" -- $cur ) )
      return 0
      ;;
  esac;

  COMPREPLY=($( compgen -W "$opts" -- $cur ) )

  return 0
}
complete -F _usbpro_firmware usbpro_firmware

#ola_throughput
#have ola_throughput && 
_ola_throughput()
{
  local cur

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=($( compgen -W '--dmx --sleep --universe' -- $cur ) )
}
complete -F _ola_throughput ola_throughput
