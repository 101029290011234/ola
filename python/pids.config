#!/usr/bin/python
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Library General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# pids.config
# Copyright (C) 2010 Simon Newton
#
# This holds the information about each RDM PID and the format of the Get/Set
# response.

PIDS = [
    Pid('proxied_devices',
        0x0010,
        [],
        [UInt16('manufacturer_id'), UInt32('device_id')],
        get_validators=[RootDevice],
    ),
    Pid('proxied_device_count',
        0x0011,
        [],
        [UInt16('device_count'), Bool('list_changed')],
        get_validators=[RootDevice],
    ),
    Pid('comms_status',
        0x0015,
        [],
        [UInt16('short_message'),
         UInt16('length_mismatch'),
         UInt16('checksum_fail')],
        [],
        [],
        get_validators=[RootDevice],
        set_validators=[RootDevice],
    ),
    Pid('queued_message',
        0x0020,
        [UInt8('status_type')],
        # we don't ever expect to see a Queued Message pid response
        [],
        get_validators=[RootDevice],
    ),
    Pid('status_message',
        0x0030,
        [UInt8('status_type')],
        RepeatedGroup([
          UInt16('sub_device'),
          UInt8('status_type'),
          UInt16('message_id'),
          UInt16('value1'),
          UInt16('value2'),
        ]),
        get_validators=[RootDevice],
    ),
    Pid('status_id_description',
        0x0031,
        [UInt16('status_id')],
        [String('label', size=32)],
        get_validators=[RootDevice],
    ),
    Pid('clear_status_id',
        0x0032,
        None,
        None,
        [],
        [],
        set_validators=[ValidSubDevice],
    ),
    Pid('sub_device_status_report_threshold',
        0x0033,
        [],
        [UInt8('status_type')],
        [UInt8('status_type')],
        [],
        get_validators=[SpecificSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('supported_parameters',
        0x0050,
        [],
        RepeatedGroup([UInt16('param')]),
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('parameter_description',
        0x0051,
        [UInt16('pid')],
        [UInt16('pid'),
         UInt8('pdl_size'),
         UInt8('data_type'),
         UInt8('command_class'),
         UInt8('type'),
         UInt8('unit'),
         UInt8('prefix'),
         UInt32('min_value'),
         UInt32('max_value'),
         UInt32('default_value'),
         String('description')],
        get_validators=[RootDevice],
    ),
    Pid('device_info',
        0x0060,
        [],
        [UInt8('protocol_major'),
         UInt8('protocol_minor'),
         UInt16('device_model'),
         UInt16('product_category'),
         UInt32('software_version'),
         UInt16('dmx_footprint'),
         UInt8('current_personality'),
         UInt8('personality_count'),
         UInt16('start_address'),
         UInt16('sub_device_count'),
         UInt8('sensor_count')],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('product_detail_id_list',
        0x0070,
        [],
        RepeatedGroup([UInt16('detai_id')], max = 6),
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('device_model_description',
        0x0080,
        [],
        [String('label', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('manufacturer_label',
        0x0081,
        [],
        [String('label', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('device_label',
        0x0082,
        [],
        [String('label', size=32)],
        [String('label', size=32)],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('factory_defaults',
        0x0090,
        [],
        [Bool('using_defaults')],
        [],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('language_capabilities',
        0x00a0,
        [],
        RepeatedGroup([String('language', size = 2)]),
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('language',
        0x00b0,
        [],
        [String('language', size = 2)],
        [String('language', size = 2)],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('software_version_label',
        0x00c0,
        [],
        [String('label', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('boot_software_version',
        0x00c1,
        [],
        [UInt32('version')],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('boot_software_label',
        0x00c2,
        [],
        [String('label', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('dmx_personality',
        0x00e0,
        [],
        [UInt8('current_personality'), UInt8('personality_count')],
        [UInt8('personality')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('dmx_personality_description',
        0x00e1,
        [UInt8('personality')],
        [UInt8('personality'),
         UInt16('slots_required'),
         String('name', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('dmx_start_address',
        0x00f0,
        [],
        [UInt16('dmx_address')],
        [UInt16('dmx_address')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('slot_into',
        0x0120,
        [],
        RepeatedGroup([
          UInt16('slot_offset'),
          UInt8('slot_type'),
          UInt16('slot_label_id')]),
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('slot_description',
        0x0121,
        [UInt16('slot_number')],
        [UInt16('slot_number'), String('name', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('default_slot_value',
        0x0122,
        [],
        RepeatedGroup([
          UInt16('slot_offset'),
          UInt8('default_slot_value')]),
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('sensor_definition',
        0x0200,
        [UInt8('sensor_number')],
        [UInt8('sensor_number'),
         UInt8('type'),
         UInt8('unit'),
         UInt8('prefix'),
         UInt16('range_min'),
         UInt16('range_max'),
         UInt16('normal_min'),
         UInt16('normal_max'),
         UInt8('supports_recording'),
         String('name', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('sensor_value',
        0x0201,
        [UInt8('sensor_number')],
        [UInt8('sensor_number'),
         UInt16('present_value'),
         UInt16('lowest'),
         UInt16('highest'),
         UInt16('recorded')],
        [UInt8('sensor_number')],
        [UInt8('sensor_number'),
         UInt16('present_value'),
         UInt16('lowest'),
         UInt16('highest'),
         UInt16('recorded')],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('record_sensors',
        0x0202,
        None,
        None,
        [UInt8('sensor_number')],
        [],
        set_validators=[ValidSubDevice],
    ),
    Pid('device_hours',
        0x0400,
        [],
        [UInt32('hours')],
        [UInt32('hours')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('lamp_hours',
        0x0401,
        [],
        [UInt32('hours')],
        [UInt32('hours')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('lamp_strikes',
        0x0402,
        [],
        [UInt32('strikes')],
        [UInt32('strikes')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('lamp_state',
        0x0403,
        [],
        [UInt8('state')],
        [UInt8('state')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('lamp_on_mode',
        0x0404,
        [],
        [UInt8('mode')],
        [UInt8('mode')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('device_power_cycles',
        0x0405,
        [],
        [UInt32('power_cycles')],
        [UInt32('power_cycles')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('display_invert',
        0x0500,
        [],
        [UInt8('invert_status')],
        [UInt8('invert_status')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('display_level',
        0x0501,
        [],
        [UInt8('level')],
        [UInt8('level')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('pan_invert',
        0x0600,
        [],
        [Bool('invert')],
        [Bool('invert')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('tilt_invert',
        0x0601,
        [],
        [Bool('invert')],
        [Bool('invert')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('pan_tilt_swap',
        0x0602,
        [],
        [Bool('swap')],
        [Bool('swap')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('real_time_clock',
        0x0603,
        [],
        [UInt16('year'),
         UInt8('month'),
         UInt8('day'),
         UInt8('hour'),
         UInt8('minute'),
         UInt8('second')],
        [UInt16('year'),
         UInt8('month'),
         UInt8('day'),
         UInt8('hour'),
         UInt8('minute'),
         UInt8('second')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('identify_device',
        0x1000,
        [],
        [Bool('identify_state')],
        [Bool('identify_state')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('reset_device',
        0x1001,
        None,
        None,
        [UInt8('reset_mode')],
        [],
        set_validators=[ValidSubDevice],
    ),
    Pid('power_state',
        0x1010,
        [],
        [UInt8('state')],
        [UInt8('state')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('perform_self_test',
        0x1020,
        [],
        [Bool('tests_active')],
        [UInt8('test_number')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    ),
    Pid('self_test_description',
        0x1021,
        [UInt8('test_number')],
        [UInt8('test_number'), String('description', size=32)],
        get_validators=[NonBroadcastSubDevice],
    ),
    Pid('capture_preset',
        0x1030,
        None,
        None,
        [UInt16('scene'),
         UInt16('fade_up_time'),
         UInt16('fade_down_time'),
         UInt16('wait_time')],
        set_validators=[ValidSubDevice],
    ),
    Pid('preset_playback',
        0x1031,
        [],
        [UInt16('mode'), UInt8('level')],
        [UInt16('mode'), UInt8('level')],
        [],
        get_validators=[NonBroadcastSubDevice],
        set_validators=[ValidSubDevice],
    )
]


# A dict of ESTA (manufacturer) IDs to PID lists
MANUFACTURER_PIDS = {
    # Creative Lighting
    0x00a1: [
      Pid('device_mode',
          0x8000,
          [],
          [UInt8('mode')],
          [UInt8('mode')],
          [],
          get_validators=[NonBroadcastSubDevice],
          set_validators=[ValidSubDevice],
      ),
    ],
    # Howard Eaton Lighting
    0x4845: [
    ],
}
