[% INCLUDE gpl %]
/*
 * This code has been autogenerated, do not edit
 */

#include <stdlib.h>
#include <string.h>

#include "[% module %][% name %]Msgs.h"
#include "[% module %][% name %]Parser.h"
#include "[% module FILTER lower %]_[% name FILTER lower %]_messages.h"

[% FOREACH msg = msgs %]
/*
 * Really simple test, create a message, pack it and unpack it
 */
int test_[% msg.name %]() {
  int l = sizeof([% lib FILTER lower %]_[% module FILTER lower %]_[% name FILTER lower %]_msg_[% msg.name FILTER lower %]) + [% lib FILTER lower %]_[% module FILTER lower %]_[% name FILTER lower %]_header_size;
  uint8_t buf[l];
  int r = 0;

  [% module %][% name %]Msg[% msg.cls_name %] *m = new [% module %][% name %]Msg[% msg.cls_name %]();
  [% module %][% name %]Msg *m2 ;
  [% module %][% name %]Msg[% msg.cls_name %] *m3 ;
  [% module %][% name %]Parser *p = new [% module %][% name %]Parser() ;

[% FOREACH var = msg.uint32_t -%]
  m->set_[% var %]( rand()  );
[% END -%]
[% FOREACH var = msg.uint16_t -%]
  m->set_[% var %]( rand() );
[% END -%]
[% FOREACH var = msg.uint8_t -%]
  m->set_[% var %]( rand() );
[% END -%] 

  r = m->pack(buf,l);

  if ( r != l ) {
    printf("Failed to pack [% module %][% name %]Msg[% msg.cls_name %]\n");
    return 1;
  }

  m2 = p->parse(buf,r);
	
  if (m2 == NULL) {
    printf("Failed to parse a [% module %][% name %]Msg[% msg.cls_name %] message\n");
    return 1;
  }

  if( m->type() != m2->type() ) {
    printf("Invalid msg type %i != %i\n", m->type(),  m2->type() );
    return 1;
  }
	
  m3 = ([% module %][% name %]Msg[% msg.cls_name %]*) m2;

[% FOREACH var = msg.uint32_t -%]
  if( m3->get_[% var %]() != m->get_[% var %]() ) {
    printf("int32 check failed\n");
    return 1;
  }
[% END -%]
[% FOREACH var = msg.uint16_t -%]
  if( m3->get_[% var %]() != m->get_[% var %]() ) {
    printf("int16 check failed\n");
    return 1;
  }
[% END -%]
[% FOREACH var = msg.uint8_t -%]
  if( m3->get_[% var %]() != m->get_[% var %]() ) {
    printf("int8 check failed\n");
    return 1;
  }
[% END -%] 

  return 0;
}
[% END %]

int main(int argc, char *argv[]) {
  int r = 0;
[% FOREACH msg = msgs %]
  r += test_[% msg.name %]();
[% END %]

  return r;
}
