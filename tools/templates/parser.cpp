[% INCLUDE gpl.tmpl %]
/*
 * This code has been autogenerated, do not edit
 */

#include <stdio.h>

#include <lla/logger.h>
#include "[% module %][% name %]Parser.h"
#include "[% module %][% name %]Message.h"

[% FOREACH msg = msgs -%]
#include "[% module %][% name %]Msg[% msg.cls_name %].h"
[% END -%]

[% module %][% name %]Parser::[% module %][% name %]Parser() {}
[% module %][% name %]Parser::~[% module %][% name %]Parser() {}


/*
 * Pass the buffer and return a Message object
 * @param data  the data representing the serialized object
 * @param len	the length of the data
 */
[% module %][% name %]Msg *[% module %][% name %]Parser::parse(const uint8_t *data, int len) {
  [% lib FILTER lower %]_[% module FILTER lower %]_[% name FILTER lower %]_msg *req = ([% lib FILTER lower %]_[% module FILTER lower %]_[% name FILTER lower %]_msg *) data;

  if(len < 1)
    return NULL;

  switch(req->op) {
[% FOREACH msg = msgs -%]
    case [% lib FILTER upper %]_[% module FILTER upper %]_[% name FILTER upper %]_MSG_[% msg.name FILTER upper %]:
      return parse_[% msg.name %](req, len);
[% END -%]
    default:
      Logger::instance()->log(Logger::WARN ,"%s: Invalid op code %i", __FUNCTION__, req->op);
      return NULL;
  }
}
[% FOREACH msg = msgs %]

/*
 * Parses a [% msg.doc %] message
 *
 * @param req	the request buffer
 * @param len 	the buffer length
 */
[% module %][% name %]Msg *[% module %][% name %]Parser::parse_[% msg.name %]([% lib FILTER lower %]_[% module FILTER lower %]_[% name FILTER lower %]_msg *req, int len) {
	
  if( len != sizeof([% lib FILTER lower %]_[% module FILTER lower %]_[% name FILTER lower %]_msg_[% msg.name FILTER lower %]) + 1)
    return NULL;

  [% module %][% name %]Msg[% msg.cls_name %] *m = new [% module %][% name %]Msg[% msg.cls_name %]();

[% FOREACH var = msg.uint32_t -%]
  m->set_[% var %](req->data.[% msg.name %].[% var %]);
[% END -%]
[% FOREACH var = msg.uint16_t -%]
  m->set_[% var %](req->data.[% msg.name %].[% var %]);
[% END -%]
[% FOREACH var = msg.uint8_t -%]
  m->set_[% var %](req->data.[% msg.name %].[% var %]);
[% END -%]
[% FOREACH array = msg.array.uint32_t -%]
  m->set_[% array.name %](req->data.[% msg.name %].[% array.name %], [% array.len %]);
[% END -%]
[% FOREACH array = msg.array.uint16_t -%]
  m->set_[% array.name %](req->data.[% msg.name %].[% array.name %], [% array.len %]);
[% END -%]
[% FOREACH array = msg.array.uint8_t -%]
  m->set_[% array.name %](req->data.[% msg.name %].[% array.name %], [% array.len %]);
[% END -%]
  return m;
}
[% END %]
