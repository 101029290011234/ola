/*
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Lla.proto
 * Defines the protocol buffers used to talk to llad
 * Copyright (C) 2005 - 2008 Simon Newton
 */

package lla.proto;

enum RegisterAction {
  REGISTER = 1;
  UNREGISTER = 2;
}

enum PatchAction {
  PATCH = 1;
  UNPATCH = 2;
}

enum MergeMode {
  HTP = 1;
  LTP = 2;
}

message Ack {
}

message DmxReadRequest {
  required int32 universe = 1;
}

message DmxData {
  required int32 universe = 1;
  required bytes data = 2;
}

message RegisterDmxRequest {
  required int32 universe = 1;
  required RegisterAction action = 2;
}

message PatchPortRequest {
  required int32 universe = 1;
  required int32 device_alias = 2;
  required int32 port_id = 3;
  required PatchAction action = 4;
}

message UniverseNameRequest {
  required int32 universe = 1;
  required string name = 2;
}

message MergeModeRequest {
  required int32 universe = 1;
  required MergeMode merge_mode = 2;
}

// request info about a universe
message UniverseInfoRequest {
  optional int32 universe = 1;
}

message UniverseInfo {
  required int32 universe = 1;
  required string name = 2;
  required MergeMode merge_mode = 3;
}

message UniverseInfoReply {
  repeated UniverseInfo universe = 1;
}

// request info on available plugins
message PluginInfoRequest {
  optional int32 plugin_id = 1;
  optional bool include_description = 2 [default = false];
}

message PluginInfo {
  required int32 plugin_id = 1;
  required string name = 2;
  optional string description = 3;
}

message PluginInfoReply {
  repeated PluginInfo plugin = 1;
}

// request info on a device
message DeviceInfoRequest {
  optional int32 plugin_id = 1;
}

message PortInfo {
  required int32 port_id = 1;
  required bool output_port = 2;
  required string description = 5;
  optional int32 universe = 3;
  optional bool active = 4;
}

message DeviceInfo {
  required int32 device_alias = 1;
  required int32 plugin_id = 2;
  required string device_name = 3;
  repeated PortInfo port = 4;
  required string device_id = 5;
}

message DeviceInfoReply {
  repeated DeviceInfo device = 1;
}

// a device config request
message DeviceConfigRequest {
  required int32 device_alias = 1;
  required bytes data = 2;
}

message DeviceConfigReply {
  required bytes data = 1;
}

// Services

// RPCs handled by the LLA Server
service LlaServerService {
  rpc GetDmx (DmxReadRequest) returns (DmxData);
  rpc RegisterForDmx (RegisterDmxRequest) returns (Ack);
  rpc UpdateDmxData (DmxData) returns (Ack);
  rpc SetUniverseName (UniverseNameRequest) returns (Ack);
  rpc SetMergeMode (MergeModeRequest) returns (Ack);
  rpc PatchPort (PatchPortRequest) returns (Ack);
  rpc GetUniverseInfo (UniverseInfoRequest) returns (UniverseInfoReply);
  rpc GetPluginInfo (PluginInfoRequest) returns (PluginInfoReply);
  rpc GetDeviceInfo (DeviceInfoRequest) returns (DeviceInfoReply);
  rpc ConfigureDevice (DeviceConfigRequest) returns (DeviceConfigReply);
}

// RPCs handled by the LLA Client
service LlaClientService {
  rpc UpdateDmxData (DmxData) returns (Ack);
}
